// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Casino main entity
model Casino {
  id            String  @id @default(cuid())
  name          String
  slug          String  @unique
  logo          String?
  websiteUrl    String
  affiliateLink String
  rating        Float   @default(0)
  established   Int?
  description   String?
  descriptionEs String?
  descriptionEn String?

  // Features
  features            String[]
  languages           String[]
  currencies          String[]
  licenses            String[]
  supportedCountries  String[]
  restrictedCountries String[]

  // Support
  supportEmail      String?
  supportPhone      String?
  liveChatAvailable Boolean @default(false)
  supportHours      String?

  // Status
  isActive     Boolean       @default(true)
  isFeatured   Boolean       @default(false)
  priority     Int           @default(0)
  status       ContentStatus @default(DRAFT)
  verifiedDate DateTime?
  publishedAt  DateTime?

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]

  // Relations
  bonuses        Bonus[]
  games          Game[]
  paymentMethods CasinoPaymentMethod[]
  reviews        Review[]
  pros           CasinoPro[]
  cons           CasinoCon[]
  versions       ContentVersion[]
  favorites      Favorite[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([isActive, isFeatured])
  @@index([status])
}

// Bonus types and offers
model Bonus {
  id       String @id @default(cuid())
  casinoId String
  casino   Casino @relation(fields: [casinoId], references: [id], onDelete: Cascade)

  type   BonusType
  name   String
  nameEs String?
  nameEn String?

  // Bonus details
  amount              Float?
  percentage          Int?
  maxBonus            Float?
  minDeposit          Float?
  freeSpins           Int?
  wageringRequirement Int?
  bonusCode           String?

  // Terms
  termsAndConditions String?
  validUntil         DateTime?

  // Status
  isExclusive Boolean @default(false)
  isActive    Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([casinoId])
  @@index([type, isActive])
}

enum BonusType {
  WELCOME
  NO_DEPOSIT
  RELOAD
  CASHBACK
  FREE_SPINS
  VIP
  HIGH_ROLLER
  REFERRAL
}

// Games and categories
model Game {
  id       String @id @default(cuid())
  casinoId String
  casino   Casino @relation(fields: [casinoId], references: [id], onDelete: Cascade)

  category      GameCategory
  provider      String
  count         Int          @default(0)
  popularTitles String[]
  
  // Relations
  favorites Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([casinoId, category])
}

enum GameCategory {
  SLOTS
  TABLE_GAMES
  LIVE_CASINO
  VIDEO_POKER
  SPORTS_BETTING
  LOTTERY
  SCRATCH_CARDS
  VIRTUAL_SPORTS
}

// Payment methods
model PaymentMethod {
  id   String      @id @default(cuid())
  name String      @unique
  type PaymentType
  logo String?

  // Processing details
  processingTime String?
  minDeposit     Float?
  maxDeposit     Float?
  minWithdrawal  Float?
  maxWithdrawal  Float?
  fees           String?

  // Relations
  casinos CasinoPaymentMethod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  E_WALLET
  BANK_TRANSFER
  CRYPTOCURRENCY
  PREPAID_CARD
  MOBILE_PAYMENT
  CASH
}

// Junction table for casino payment methods
model CasinoPaymentMethod {
  id              String @id @default(cuid())
  casinoId        String
  paymentMethodId String

  casino        Casino        @relation(fields: [casinoId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  depositAvailable    Boolean @default(true)
  withdrawalAvailable Boolean @default(true)

  @@unique([casinoId, paymentMethodId])
  @@index([casinoId])
  @@index([paymentMethodId])
}

// Reviews
model Review {
  id       String @id @default(cuid())
  casinoId String
  casino   Casino @relation(fields: [casinoId], references: [id], onDelete: Cascade)

  locale  String @default("es")
  title   String
  content String

  // Ratings
  overallRating Float
  gamesRating   Float?
  bonusesRating Float?
  paymentRating Float?
  supportRating Float?
  mobileRating  Float?

  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Author
  authorName   String
  authorEmail  String?
  authorAvatar String?

  // Status
  isPublished Boolean @default(false)

  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([casinoId, locale])
  @@index([isPublished])
}

// Casino pros
model CasinoPro {
  id       String @id @default(cuid())
  casinoId String
  casino   Casino @relation(fields: [casinoId], references: [id], onDelete: Cascade)

  text   String
  textEs String?
  textEn String?
  order  Int     @default(0)

  @@index([casinoId])
}

// Casino cons
model CasinoCon {
  id       String @id @default(cuid())
  casinoId String
  casino   Casino @relation(fields: [casinoId], references: [id], onDelete: Cascade)

  text   String
  textEs String?
  textEn String?
  order  Int     @default(0)

  @@index([casinoId])
}

// Newsletter subscribers
model Subscriber {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  // Preferences
  locale    String   @default("es")
  country   String?
  interests String[]

  // Status
  isActive          Boolean @default(true)
  isVerified        Boolean @default(false)
  verificationToken String?

  // Timestamps
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  @@index([email])
  @@index([isActive, isVerified])
}

// Contact form submissions
model ContactSubmission {
  id String @id @default(cuid())

  name    String
  email   String
  subject String
  message String

  // Status
  isRead    Boolean @default(false)
  isReplied Boolean @default(false)

  // Timestamps
  createdAt DateTime  @default(now())
  repliedAt DateTime?

  @@index([isRead, isReplied])
}

// User management for admin panel
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(EDITOR)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentVersions ContentVersion[]
  auditLogs       AuditLog[]
  media           Media[]
  favorites       Favorite[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EDITOR
  REVIEWER
  VIEWER
}

// Media library for images and files
model Media {
  id           String  @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  alt          String?
  caption      String?
  width        Int?
  height       Int?

  // Optimized versions
  thumbnailUrl String?
  mediumUrl    String?
  largeUrl     String?

  // Organization
  folder String   @default("/")
  tags   String[]

  // Relations
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([folder])
  @@index([uploadedById])
}

// Content versioning system
model ContentVersion {
  id         String  @id @default(cuid())
  entityType String // "casino", "bonus", "review", etc.
  entityId   String
  version    Int     @default(1)
  data       Json // Complete snapshot of the entity
  changes    Json? // Diff from previous version
  comment    String?

  // Relations
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  Casino      Casino?  @relation(fields: [casinoId], references: [id])
  casinoId    String?

  @@unique([entityType, entityId, version])
  @@index([entityType, entityId])
  @@index([createdById])
}

// Audit logging for all admin actions
model AuditLog {
  id         String  @id @default(cuid())
  action     String // "CREATE", "UPDATE", "DELETE", "LOGIN", etc.
  entityType String? // "casino", "bonus", "user", etc.
  entityId   String?
  details    Json? // Additional context about the action
  ipAddress  String?
  userAgent  String?

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

// SEO metadata management
model SeoMetadata {
  id             String   @id @default(cuid())
  path           String   @unique
  title          String?
  titleEs        String?
  titleEn        String?
  description    String?
  descriptionEs  String?
  descriptionEn  String?
  keywords       String[]
  ogImage        String?
  ogTitle        String?
  ogDescription  String?
  twitterCard    String   @default("summary_large_image")
  canonicalUrl   String?
  robots         String   @default("index,follow")
  structuredData Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([path])
}

// Favorites model for user saved items
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Can be either casino or game
  casinoId  String?
  casino    Casino?  @relation(fields: [casinoId], references: [id], onDelete: Cascade)
  
  gameId    String?
  game      Game?    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, casinoId])
  @@unique([userId, gameId])
  @@index([userId])
  @@index([casinoId])
  @@index([gameId])
}

// Blog posts
model BlogPost {
  id String @id @default(cuid())
  
  // Basic information
  slug          String  @unique
  title         String
  titleEs       String?
  titleEn       String?
  excerpt       String
  excerptEs     String?
  excerptEn     String?
  content       String  @db.Text
  contentEs     String? @db.Text
  contentEn     String? @db.Text
  
  // Author information
  author        String
  authorRole    String?
  authorEmail   String?
  authorAvatar  String?
  
  // Categorization
  category      String
  tags          String[]
  
  // Media
  featuredImage String?
  images        String[]
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  canonicalUrl    String?
  
  // Statistics
  views         Int     @default(0)
  likes         Int     @default(0)
  shares        Int     @default(0)
  readTime      Int     @default(5) // in minutes
  
  // Status
  status        BlogStatus @default(DRAFT)
  isFeatured    Boolean    @default(false)
  
  // Timestamps
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  @@index([slug])
  @@index([status, publishedAt])
  @@index([category])
  @@index([isFeatured])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Content status enum
enum ContentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}
