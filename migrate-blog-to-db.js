// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –±–ª–æ–≥–∞ –∏–∑ JSON –≤ Supabase
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://hbkxgahzbxnpfkhfzebu.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhia3hnYWh6YnhucGZraGZ6ZWJ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE0MDU0MzAsImV4cCI6MjA0Njk4MTQzMH0.dPdwY3s7kb0DPb3x-KF7nLqBqPNEomq5Nu1z_JTmKGw'
);

async function migrateBlogPosts() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ –±–ª–æ–≥–∞...\n');

    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã –∏–∑ JSON
    const jsonPath = path.join(__dirname, 'data', 'blog-posts.json');
    const jsonContent = await fs.readFile(jsonPath, 'utf-8');
    const posts = JSON.parse(jsonContent);

    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏\n`);

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç
    for (const post of posts) {
      console.log(`üìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç: ${post.title}`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const dbPost = {
        slug: post.slug,
        title: post.title,
        excerpt: post.excerpt,
        content: post.content,
        author: post.author,
        author_role: post.authorRole,
        category: post.category,
        tags: post.tags,
        featured_image: post.featuredImage,
        published_at: post.publishedAt,
        updated_at: post.updatedAt || post.publishedAt,
        read_time: post.readTime,
        views: post.views || 0,
        likes: post.likes || 0,
        status: post.status || 'published',
        seo_title: post.seo?.metaTitle || post.title,
        seo_description: post.seo?.metaDescription || post.excerpt,
        seo_keywords: post.seo?.keywords || []
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º slug
      const { data: existing, error: checkError } = await supabase
        .from('blog_posts')
        .select('id')
        .eq('slug', post.slug)
        .single();

      if (checkError && checkError.code !== 'PGRST116') {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${checkError.message}`);
        continue;
      }

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
        const { error: updateError } = await supabase
          .from('blog_posts')
          .update(dbPost)
          .eq('slug', post.slug);

        if (updateError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateError.message}`);
        } else {
          console.log(`   ‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω`);
        }
      } else {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        const { error: insertError } = await supabase
          .from('blog_posts')
          .insert(dbPost);

        if (insertError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: ${insertError.message}`);
        } else {
          console.log(`   ‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω`);
        }
      }
    }

    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: stats, error: statsError } = await supabase
      .from('blog_posts')
      .select('status');

    if (!statsError && stats) {
      const published = stats.filter(p => p.status === 'published').length;
      const draft = stats.filter(p => p.status === 'draft').length;
      const archived = stats.filter(p => p.status === 'archived').length;

      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      console.log(`   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${published}`);
      console.log(`   –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: ${draft}`);
      console.log(`   –í –∞—Ä—Ö–∏–≤–µ: ${archived}`);
      console.log(`   –í—Å–µ–≥–æ: ${stats.length}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateBlogPosts();